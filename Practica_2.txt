Título: Práctica 2 de Algoritmos "Ordenación por inserción y ordenación shell"

Brais García Brenlla
Ángel Álvarez Rey

Os test foron realizados con unha máquina con estas especificacións:

OS:
  Ubuntu 19.04
CPU:
  Intel(R) Core(TM) i5-8265U CPU @ 1.60GHz
  1 physical processor; 4 cores; 4 threads
RAM:
  5148720 KiB

---------------------------------INTRODUCCIÓN-----------------------------------

Neste exercicio medimos os tempos de dous algoritmos para ordenar un vector con
diferentes ordes de colocación.

Para esta práctica debemos ter en conta:

1.-O tempo estará sempre medido en microsegundos.

2.-Aquelas filas marcadas por '*' estarán medidas con respecto a 1000 iteracións,
   pois o tempo de cada iteración é menor de 500 microsegundos e sería inexacto
   debido ás aproximacións.

3.-No caso de apareceren valores anómalos serán indicados neste arquivo.

4.-As columnas representan o valor aplicado á función, o tempo medido, unha cota
   subestimada, outra axustada e outra sobreestimada repectivamente (ademáis, en
   sumaSubMax2, aparecerá a cota teórica entre a axustada e a sobreestimada).

5.-Os valores aplicados á función son resultado dunha progresión xeométrica de
   de razón 2 empezando en 250.

6.-O programa debe ser compilado co argumento -lm para funcionar correctamente.

Agora imos analizar as táboas que conteñen os datos aos que se aplica cada
función, tempo de execución e cotas.




---------------------------Ordenación POR inserción-----------------------------


Ordenación por inserción de un vector ordenado

               n            t(n)      t(n)/n^0.8          t(n)/n      t(n)/n^1.2
            250*          -3.472       -0.042341       -0.013888       -0.008000
            500*           1.733        0.012035        0.003466        0.001863
           1000*           3.378        0.013458        0.003378        0.001693
           2000*           6.882        0.015748        0.003441        0.001609
           4000*          13.663        0.017954        0.003416        0.001490
           8000*          27.434        0.020705        0.003429        0.001396
          16000*          55.307        0.023963        0.003457        0.001313
          32000*         107.612        0.026776        0.003363        0.001192

Podemos observar que na primeira fila os tempos son negativos, algo que é imposible
e polo tanto non debemos telos en conta.


Cota subestimada: pow(n,0.8)
Cota axustada: n
Cota sobreestimada: pow(n,1.2)

Observacións:
1.- Os resultados da columna da cota subestimada tenden a infinito.
2.- Os resultados da cota axustada tenden entre [0.00336-0.00344].
3.- Os resultados da cota sobreestimada tenden a 0.



Ordenación por inserción de un vector inversamente ordenado

               n            t(n)      t(n)/n^1.8        t(n)/n^2      t(n)/n^2.2
            250*          80.119        0.003868        0.001282        0.000425
            500*         316.405        0.004386        0.001266        0.000365
           1000         1250.000        0.004976        0.001250        0.000314
           2000         5197.000        0.005942        0.001299        0.000284
           4000        20814.000        0.006834        0.001301        0.000248
           8000        80494.000        0.007589        0.001258        0.000208
          16000       330745.000        0.008955        0.001292        0.000186
          32000      1292379.000        0.010049        0.001262       -0.000602





Cota subestimada: pow(n,1.8)
Cota axustada: pow(n,2)
Cota sobreestimada: pow(n,2.2)

Observacións:
1.- Os resultados da columna da cota subestimada tenden a infinito.
2.- Os resultados da cota axustada tenden entre [0.00125-0.00130].
3.- Os resultados da cota sobreestimada tenden a 0.



Ordenación por inserción de un vector aleatorio

               n            t(n)      t(n)/n^1.8     t(n)/n^1.98      t(n)/n^2.2
            250*          41.637        0.002010        0.000744        0.000221
            500*         159.911        0.002217        0.000724        0.000185
           1000          656.000        0.002612        0.000753        0.000165
           2000         2417.000        0.002763        0.000703        0.000132
           4000        10372.000        0.003405        0.000765        0.000123
           8000        41003.000        0.003866        0.000767        0.000106
          16000       158803.000        0.004300        0.000753        0.000089
          32000       642098.000        0.004993        0.000772       -0.000299



Cota subestimada: pow(n,1.8)
Cota axustada: pow(n,1.98)
Cota sobreestimada: pow(n,2.2)

Observacións:
1.- Os resultados da columna da cota subestimada tenden a infinito.
2.- Os resultados da cota axustada tenden entre [0.00070-0.00077].
3.- Os resultados da cota sobreestimada tenden a 0.




-----------------------------Ordenación DE SHELL--------------------------------


Ordenación de shell de un vector ordenado

               n            t(n)          t(n)/n    t(n)/n^1.135      t(n)/n^1.3
            250*           6.108        0.024432        0.010986        0.004663
            500*          14.397        0.028794        0.011695        0.004464
           1000*          32.354        0.032354        0.011886        0.004073
           2000*          74.710        0.037355        0.012408        0.003820
           4000*         160.582        0.040146        0.012060        0.003334
           8000*         354.404        0.044300        0.012036        0.002989
          16000          780.000        0.048750        0.011978        0.002671
          32000         1646.000        0.051437        0.011430        0.002289



Cota subestimada: n
Cota axustada: pow(n,1.135)
Cota sobreestimada: pow(n,1.3)

Observacións:
1.- Os resultados da columna da cota subestimada tenden a infinito.
2.- Os resultados da cota axustada tenden entre [0.0116-0.0120].
3.- Os resultados da cota sobreestimada tenden a 0.



Ordenación de shell de un vector inversamente ordenado

               n            t(n)          t(n)/n    t(n)/n^1.125      t(n)/n^1.3
            250*           9.128        0.036512        0.018329        0.006968
            500*          20.894        0.041788        0.019222        0.006479
           1000*          46.866        0.046866        0.019766        0.005900
           2000*         103.747        0.051874        0.020059        0.005305
           4000*         229.758        0.057440        0.020369        0.004771
           8000*         522.396        0.065299        0.021234        0.004405
          16000         1139.000        0.071188        0.021227        0.003901
          32000         2449.000        0.076531        0.020926        0.003406



Cota subestimada: n
Cota axustada: pow(n,1.125)
Cota sobreestimada: pow(n,1.3)

Observacións:
1.- Os resultados da columna da cota subestimada tenden a infinito.
2.- Os resultados da cota axustada tenden entre [0.0200-0.0212].
3.- Os resultados da cota sobreestimada tenden a 0.


Ordenación de shell de un vector aleatorio

               n            t(n)          t(n)/n      t(n)/n^1.2      t(n)/n^1.4
            250*          21.475        0.085900        0.028481        0.009440
            500*          50.521        0.101042        0.029169        0.008413
           1000*         116.294        0.116294        0.029212        0.007338
           2000*         266.151        0.133076        0.029100        0.006363
           4000          623.000        0.155750        0.029650        0.005644
           8000         1336.000        0.167000        0.027676        0.004586
          16000         2997.000        0.187312        0.027024        0.003899
          32000         7243.000        0.226344        0.028428        0.003570

Cota subestimada: n
Cota axustada: pow(n,1.2)
Cota sobreestimada: pow(n,1.4)

Observacións:
1.- Os resultados da columna da cota subestimada tenden a infinito.
2.- Os resultados da cota axustada tenden entre [0.0270-0.0292].
3.- Os resultados da cota sobreestimada tenden a 0.






-----------------------------------CONCLUSIÓN-----------------------------------

Para esta práctica tívose que facer uso de repetición da función en gran parte das
probas, pois o segundo código necesita un vector moi grande para superar
os 500 microsegundos.

Dados estes resultados deducimos que o segundo codigo é mais rapido e eficiente
na maioria dos casos, pero nos casos onde o vector xa estea maioritariamente
ordenado será mellor  o primeiro, pois si será mais rápido. A principal causa
desto é que o primeiro algoritmo cambia a súa complexidade dependendo da ordenación
do vector, mentres que o segundo é mais constante.
